apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  params:
    - name: repo-url
      type: string
      description: The git repository URL to clone from.
    - name: branch
      type: string
      description: The git branch to clone.
      default: "main"
    - name: app-name
      type: string
      description: Name of the application
    - name: build-image
      type: string
      description: Name of the image to build
  workspaces:
    - name: output
  tasks:
    - name: cleanup
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: output
    
    - name: git-clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter:
        - cleanup
      workspaces:
        - name: output
          workspace: output
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)
    
    - name: flake8-lint
      taskRef:
        name: flake8
        kind: ClusterTask
      runAfter:
        - git-clone
      workspaces:
        - name: source
          workspace: output
      params:
        - name: image
          value: python:3.9-slim
        - name: path
          value: service
        - name: requirements_file
          value: requirements.txt
    
    - name: nose-tests
      taskRef:
        name: nose
      runAfter:
        - flake8-lint
      workspaces:
        - name: source
          workspace: output
      params:
        - name: args
          value: "-v --with-spec --spec-color --with-coverage --cover-package=app"
    
    - name: build-image
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - nose-tests
      workspaces:
        - name: source
          workspace: output
      params:
        - name: IMAGE
          value: $(params.build-image)
        - name: DOCKERFILE
          value: ./Dockerfile
        - name: CONTEXT
          value: .
    
    - name: deploy-app
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - build-image
      params:
        - name: SCRIPT
          value: |
            oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
